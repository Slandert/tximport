% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/summarizeToGene.R, R/tximport.R
\name{summarizeToGene}
\alias{summarizeToGene}
\alias{tximport}
\title{Import transcript-level abundances and counts
for transcript- and gene-level analysis packages}
\usage{
summarizeToGene(txi, tx2gene, ignoreTxVersion = FALSE,
  countsFromAbundance = c("no", "scaledTPM", "lengthScaledTPM"))

tximport(files, type = c("none", "salmon", "sailfish", "kallisto", "rsem"),
  txIn = TRUE, txOut = FALSE, countsFromAbundance = c("no", "scaledTPM",
  "lengthScaledTPM"), tx2gene = NULL, varReduce = FALSE,
  dropInfReps = FALSE, ignoreTxVersion = FALSE, geneIdCol, txIdCol,
  abundanceCol, countsCol, lengthCol, importer = NULL)
}
\arguments{
\item{txi}{list of matrices of trancript-level abundances, counts, and
lengths produced by \code{tximport}, only used by \code{summarizeToGene}}

\item{tx2gene}{a two-column data.frame linking transcript id (column 1)
to gene id (column 2).
the column names are not relevant, but this column order must be used. 
this argument is required for gene-level summarization for methods
that provides transcript-level estimates only
(kallisto, Salmon, Sailfish)}

\item{ignoreTxVersion}{logical, whether to split the tx id on the '.' character
to remove version information, for easier matching with the tx id in gene2tx
(default FALSE)}

\item{countsFromAbundance}{character, either "no" (default), "scaledTPM",
or "lengthScaledTPM",
for whether to generate estimated counts using abundance estimates
scaled up to library size (scaledTPM) or additionally scaled using
the average transcript length over samples and
the library size (lengthScaledTPM). if using scaledTPM or lengthScaledTPM, 
then the counts are no longer correlated with average transcript length,
and so the length offset matrix should not be used.}

\item{files}{a character vector of filenames for the transcript-level abundances}

\item{type}{character, the type of software used to generate the abundances.
Options are "salmon", "sailfish", "kallisto", "rsem".
This argument is used to autofill the arguments below (geneIdCol, etc.)
"none" means that the user will specify these columns.}

\item{txIn}{logical, whether the incoming files are transcript level (default TRUE)}

\item{txOut}{logical, whether the function should just output
transcript-level (default FALSE)}

\item{varReduce}{whether to reduce per-sample inferential replicates
information into a matrix of sample variances \code{variance} (default FALSE)}

\item{dropInfReps}{whether to skip reading in inferential replicates
(default FALSE)}

\item{geneIdCol}{name of column with gene id. if missing,
the gene2tx argument can be used}

\item{txIdCol}{name of column with tx id}

\item{abundanceCol}{name of column with abundances (e.g. TPM or FPKM)}

\item{countsCol}{name of column with estimated counts}

\item{lengthCol}{name of column with feature length information}

\item{importer}{a function used to read in the files}
}
\value{
a simple list containing matrices: abundance, counts, length.
Another list element 'countsFromAbundance' carries through
the character argument used in the tximport call.
If detected, and \code{txOut=TRUE}, inferential replicates for
each sample will be imported and stored as a list of matrices,
itself an element \code{infReps} in the returned list.
If \code{varReduce=TRUE} the inferential replicates will be summarized
according to the sample variance, and stored as a matrix \code{variance}.
The length matrix contains the average transcript length for each
gene which can be used as an offset for gene-level analysis.
}
\description{
\code{tximport} imports transcript-level estimates from various
external software and optionally summarizes abundances, counts,
and transcript lengths
to the gene-level (default) or outputs transcript-level matrices
(see \code{txOut} argument).
}
\details{
\code{tximport} will also load in information about inferential replicates --
a list of matrices of the Gibbs samples from the posterior, or bootstrap replicates,
per sample -- if these data are available in the expected locations
relative to the \code{files}, and if \code{txOut=TRUE}.
The inferential replicates, stored in \code{infReps} in the output list,
are on estimated counts, and therefore follow \code{counts} in the output list.
By setting \code{varReduce=TRUE}, the inferential replicate matrices
will be replaced by a single matrix with the sample variance
per transcript and per sample.
Inferential replicate information is not summarized to the gene level.

While \code{tximport} summarizes to the gene-level by default, 
the user can also perform the import and summarization steps manually,
by specifing \code{txOut=TRUE} and then using the function
\code{summarizeToGene}.
Note however that this is equivalent to \code{tximport} with
\code{txOut=FALSE} (the default).

Solutions to the error "tximport failed at summarizing to the gene-level":

\enumerate{
  \item provide a \code{tx2gene} data.frame linking transcripts to genes (more below)
  \item avoid gene-level summarization by specifying \code{txOut=TRUE}
  \item set \code{geneIdCol} to an appropriate column in the files
}

See \code{vignette('tximport')} for example code for generating a
\code{tx2gene} data.frame from a \code{TxDb} object.
Note that the \code{keys} and \code{select} functions used
to create the \code{tx2gene} object are documented
in the man page for \link[AnnotationDbi]{AnnotationDb-class} objects
in the AnnotationDbi package (TxDb inherits from AnnotationDb).
For further details on generating TxDb objects from various inputs
see \code{vignette('GenomicFeatures')} from the GenomicFeatures package.
}
\section{Functions}{
\itemize{
\item \code{summarizeToGene}: Summarize transcript-level to gene-level

\item \code{tximport}: Import estimates of abundances and counts
}}

\examples{

# load data for demonstrating tximport
# note that the vignette shows more examples
# including how to read in files quickly using the readr package

library(tximportData)
dir <- system.file("extdata", package="tximportData")
samples <- read.table(file.path(dir,"samples.txt"), header=TRUE)
files <- file.path(dir,"salmon", samples$run, "quant.sf")
names(files) <- paste0("sample",1:6)

# tx2gene links transcript IDs to gene IDs for summarization
tx2gene <- read.csv(file.path(dir, "tx2gene.csv"))

txi <- tximport(files, type="salmon", tx2gene=tx2gene)

}
\references{
Charlotte Soneson, Michael I. Love, Mark D. Robinson (2015):
Differential analyses for RNA-seq: transcript-level estimates
improve gene-level inferences. F1000Research.
\url{http://dx.doi.org/10.12688/f1000research.7563.1}
}
